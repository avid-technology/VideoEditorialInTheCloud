{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "type": "string",
            "minLength": 3,
            "maxLength": 4,
            "metadata": {
            "description": "Prefix must be 3-char min, 4-char max, lowercase alphanumeric"
      }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
            "description": "Username for the Virtual Machine."
      }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
            "description": "Password for the Virtual Machine."
            }
        },
        "vmSize": {
            "type": "string",
            "metadata": {
                "description": "Size of the Media Composer VM. Please select v4 type for AMD GPU and v3 for NVIDIA GPU"
            },
            "allowedValues": [
                "Standard_NV4as_v4",
                "Standard_NV8as_v4",
                "Standard_NV16as_v4",
                "Standard_NV32as_v4",
                "Standard_NV12s_v3",
                "Standard_NV24s_v3",
                "Standard_NV48s_v3"
            ]
        },
        "numberOfInstances": {
            "type": "int",
            "metadata": {
                "description": "Number of instances to launch"
            },
            "defaultValue": 1
        },
        "general-VnetResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Name of the Resource Group where the existing Vnet is deployed."
            }
        },
        "general-VnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the existing Virtual Network."
            }
        },
        "general-SubnetName": {
            "type": "string",
            "metadata": {
                "description": "Existing subnet in where VMs should be deployed"
            }
        },
        "_system-InstallURL": {
            "type": "string",
            "defaultValue": "https://eitcstore01.blob.core.windows.net"
        },
        "mediaComposerOS": {
            "type": "string",
            "metadata": {
                "description": "OS for MediaComposer. Should be either: Windows_10, Windows_Server_2016, Windows_Server_2019"
            },
            "allowedValues": [
                "Windows_10",
                "Windows_Server_2016",
                "Windows_Server_2019"
            ],
            "defaultValue": "Windows_10"
        },
        "mediaComposerVersion": {
            "type": "string",
            "metadata": {
                "description": "MediaComposer version. Should be either: 2018.12.13, 2019.12, 2020.9.0"
            },
            "allowedValues": [
                "2018.12.13",
                "2019.12",
                "2020.9.0"
            ],
            "defaultValue": "2020.9.0"
        },
        "teradiciInstallFileName": {
            "type": "string",
            "defaultValue": "pcoip-agent-graphics_20.10.1.exe"
        },
        "nexisClientInstallFileName": {
            "type": "string",
            "defaultValue": "AvidNEXISClient_Win64_20.7.3.10.msi"
        },
        "gpuType": {
            "type": "string",
            "metadata": {
                "description": "GPu type. Should be: NVIDIA, AMD"
            },
            "defaultValue": "NVIDIA",
            "allowedValues": [
                "AMD",
                "NVIDIA"
            ]
        },
        "branchName": {
            "type": "string",
            "metadata": {
                "description": "Branch to point script to. Either master or avid-development"
            },
            "defaultValue": "master",
            "allowedValues": [
                "master",
                "avid-development"
            ]
        }
    },
    "variables": {
        "adminPassword": "[parameters('adminPassword')]",
        "adminUsername": "[parameters('adminUsername')]",
        "createNic?": true,
        "osType": "[variables(concat('osType_',parameters('mediaComposerOS')))]",
        "osType_Windows_10": {
            "publisher": "MicrosoftWindowsDesktop",
            "offer": "Windows-10",
            "sku": "rs5-pro",
            "version": "latest"
        },
        "osType_Windows_Server_2016": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
        },
        "osType_Windows_Server_2019": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-Datacenter",
            "version": "latest"
        },
        "scriptFileName": "[variables(concat('mcVersion_',parameters('gpuType'),'_',parameters('mediaComposerVersion')))]",
        "mcVersion_AMD_2018.12.13": "setupMediaComposer_AMD_20181213.ps1",
        "mcVersion_AMD_2019.12": "setupMediaComposer_AMD_20209.ps1",
        "mcVersion_AMD_2020.9.0": "setupMediaComposer_AMD_20209.ps1",
        "mcVersion_NVIDIA_2018.12.13": "setupMediaComposer_NVIDIA_20181213.ps1",
        "mcVersion_NVIDIA_2019.12": "setupMediaComposer_NVIDIA_20209.ps1",
        "mcVersion_NVIDIA_2020.9.0": "setupMediaComposer_NVIDIA_20209.ps1",
        "networkSecurityGroupRules": [
            {
                "name": "RDP",
                "properties": {
                    "priority": 300,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "3389"
                }
            },
            {
                "name": "PCoIPtcp",
                "properties": {
                    "priority": 301,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "4172"
                }
            },
            {
                "name": "PCoIPudp",
                "properties": {
                    "priority": 302,
                    "protocol": "UDP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "4172"
                }
            },
            {
                "name": "certauthhttp",
                "properties": {
                    "priority": 303,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "80"
                }
            },
            {
                "name": "certauthhttps",
                "properties": {
                    "priority": 304,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "443"
                }
            },
            {
                "name": "Teradici",
                "properties": {
                    "priority": 305,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "60443"
                }
            }

        ],
        "location": "[resourceGroup().location]",
        "uniqueName": "[parameters('namePrefix')]",
        "networkSecurityGroupName": "[concat(parameters('namePrefix'),'-mc-nsg')]",
        "nicName": "[concat(variables('uniqueName'), '-mc-nic-')]",
        "numberOfInstances": "[parameters('numberOfInstances')]",
        "publicIPAddressName": "[concat(variables('uniqueName'), '-mc-ip-')]",
        "osDiskName": "[concat(variables('uniqueName'), '-mc-os-disk-')]",
        "subnetId": "[concat(resourceId(parameters('general-VnetResourceGroup'), 'Microsoft.Network/virtualNetworks/', parameters('general-VnetName')), '/subnets/',parameters('general-SubnetName'))]",
        "teradiciKey": "null",
        "vmName": "[concat(variables('uniqueName'),'-mc-')]",
        "vmSize": "[parameters('vmSize')]",
        "scriptFolder": ".",
        "mediaComposerFileName": "[concat('Media_Composer_',parameters('mediaComposerVersion'),'_Win.zip')]",
        "teradiciInstallFileName": "[parameters('teradiciInstallFileName')]",
        "nexisClientInstallFileName": "[parameters('nexisClientInstallFileName')]",
        "_githubLocation": "[concat('https://raw.githubusercontent.com/avid-technology/VideoEditorialInTheCloud/',parameters('branchName'),'/Avid_Edit_In_The_Cloud_Arm')]",
        "scriptLocation": "[concat(variables('_githubLocation'), '/','scripts')]",
        "mediaComposerInstallLocation": "[concat(parameters('_system-InstallURL'), '/','installers','/',variables('mediaComposerFileName'))]",
        "teradiciInstallLocation": "[concat(parameters('_system-InstallURL'), '/','installers','/',variables('teradiciInstallFileName'))]",
        "nexisClientInstallLocation": "[concat(parameters('_system-InstallURL'), '/','installers','/',variables('nexisClientInstallFileName'))]",
        "scriptParameters": "[concat('-TeradiciKey ', variables('teradiciKey'),' -MediaComposerURL ', variables('mediaComposerInstallLocation'),' -TeradiciURL ', variables('teradiciInstallLocation'),' -AvidNEXISClientURL ', variables('nexisClientInstallLocation'))]"
    },
    "resources": [
        {
            "apiVersion": "2018-02-01",
            "name": "pid-bc1e25ec-4990-4a2d-a035-a332bebc3ded",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "name": "[concat(variables('networkSecurityGroupName'))]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2018-08-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": "[variables('networkSecurityGroupRules')]"
            },
            "tags": {}
        },
        {
            "apiVersion": "2017-10-01",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('publicIPAddressName'),padLeft(copyindex(1),2,'0'))]",
            "location": "[variables('location')]",
            "copy": {
                "name": "publicIPLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            }
        },
        {
            "apiVersion": "2017-10-01",
            "condition": "[variables('createNic?')]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nicName'), padLeft(copyindex(1),2,'0'))]",
            "location": "[variables('location')]",
            "copy": {
                "name": "nicLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "publicIPLoop",
                "[concat(variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressName'), padLeft(copyindex(1),2,'0')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', concat(variables('networkSecurityGroupName')))]"
                }
            }
        },
        {
            "apiVersion": "2017-12-01",
            "tags": {
                "avid": "mediacomposer"
            },
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('vmName'),  padLeft(copyindex(1),2,'0'))]",
            "location": "[variables('location')]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "nicLoop"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computername": "[concat(variables('vmName'), padLeft(copyindex(1),2,'0'))]",
                    "adminUsername": "[variables('adminUsername')]",
                    "adminPassword": "[variables('adminPassword')]",
                    "windowsConfiguration": {
                        "provisionVmAgent": "true"
                    }
                },
                "storageProfile": {
                    "imageReference": "[variables('osType')]",
                    "osDisk": {
                        "name": "[concat(variables('osDiskName'), padLeft(copyindex(1),2,'0'))]",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), padLeft(copyindex(1),2,'0')))]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(concat(variables('vmName'),  padLeft(copyindex(1),2,'0')),'/create.avid.mediacomposer.v0.3.0')]",
            "apiVersion": "2017-12-01",
            "location": "[variables('location')]",
            "copy": {
                "name": "extensionLoop1",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "virtualMachineLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.9",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(variables('scriptLocation'), '/',variables('scriptFileName'))]"
                    ],
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('scriptFolder'), '/', variables('scriptFileName'), ' ', variables('scriptParameters'))]"
                }
            }
        },
        {
            "condition": "[equals(parameters('gpuType'),'NVIDIA')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(concat(variables('vmName'),  padLeft(copyindex(1),2,'0')),'/install.nvidiagpu.v0')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('location')]",
            "copy": {
                "name": "extensionLoop2",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "extensionLoop1"
            ],
            "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "NvidiaGpuDriverWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                }
            }
        },
        {
            "condition": "[equals(parameters('gpuType'),'AMD')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(concat(variables('vmName'),  padLeft(copyindex(1),2,'0')),'/install.amdgpu.v0')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('location')]",
            "copy": {
                "name": "extensionLoop2",
                "count": "[variables('numberOfInstances')]"
            },
            "dependsOn": [
                "extensionLoop1"
            ],
            "properties": {
                "publisher": "Microsoft.HpcCompute",
                "type": "AmdGpuDriverWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                }
            }
        }
    ],
    "outputs": {
        "resource_group": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "location": {
            "type": "string",
            "value": "[variables('location')]"
        },
        "subnet_id": {
            "type": "string",
            "value": "[variables('subnetId')]"
        }
    }
}